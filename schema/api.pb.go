// Copyright 2022-present Seal Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by protoc-gen-go. DO NOT EDIT.
// 	protoc-gen-go v1.28.0
// 	protoc        v3.20.1
// source: api.proto

package schema

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DatasetIngestRequestType int32

const (
	DatasetIngestRequestType_Compliance_License_Tag         DatasetIngestRequestType = 0
	DatasetIngestRequestType_Compliance_License             DatasetIngestRequestType = 1
	DatasetIngestRequestType_Weakness_Vulnerability_Tag     DatasetIngestRequestType = 2
	DatasetIngestRequestType_Weakness_Vulnerability         DatasetIngestRequestType = 3
	DatasetIngestRequestType_Weakness_Vulnerability_Feature DatasetIngestRequestType = 4
)

// Enum value maps for DatasetIngestRequestType.
var (
	DatasetIngestRequestType_name = map[int32]string{
		0: "Compliance_License_Tag",
		1: "Compliance_License",
		2: "Weakness_Vulnerability_Tag",
		3: "Weakness_Vulnerability",
		4: "Weakness_Vulnerability_Feature",
	}
	DatasetIngestRequestType_value = map[string]int32{
		"Compliance_License_Tag":         0,
		"Compliance_License":             1,
		"Weakness_Vulnerability_Tag":     2,
		"Weakness_Vulnerability":         3,
		"Weakness_Vulnerability_Feature": 4,
	}
)

func (x DatasetIngestRequestType) Enum() *DatasetIngestRequestType {
	p := new(DatasetIngestRequestType)
	*p = x
	return p
}

func (x DatasetIngestRequestType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DatasetIngestRequestType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_enumTypes[0].Descriptor()
}

func (DatasetIngestRequestType) Type() protoreflect.EnumType {
	return &file_api_proto_enumTypes[0]
}

func (x DatasetIngestRequestType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DatasetIngestRequestType.Descriptor instead.
func (DatasetIngestRequestType) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{0}
}

type ComplianceLicense struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// primary key
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// management
	CreateTime    *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime    *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	DeprecateTime *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=deprecate_time,json=deprecateTime,proto3,oneof" json:"deprecate_time,omitempty"`
	Tags          []byte                 `protobuf:"bytes,14,opt,name=tags,proto3" json:"tags,omitempty"`
	// information
	Code           string `protobuf:"bytes,21,opt,name=code,proto3" json:"code,omitempty"`
	Description    string `protobuf:"bytes,22,opt,name=description,proto3" json:"description,omitempty"`
	References     []byte `protobuf:"bytes,23,opt,name=references,proto3" json:"references,omitempty"`
	Text           string `protobuf:"bytes,24,opt,name=text,proto3" json:"text,omitempty"`
	StandardHeader string `protobuf:"bytes,25,opt,name=standard_header,json=standardHeader,proto3" json:"standard_header,omitempty"`
	Comments       string `protobuf:"bytes,26,opt,name=comments,proto3" json:"comments,omitempty"`
	// extension
	Specific []byte `protobuf:"bytes,101,opt,name=specific,proto3,oneof" json:"specific,omitempty"`
}

func (x *ComplianceLicense) Reset() {
	*x = ComplianceLicense{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceLicense) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceLicense) ProtoMessage() {}

func (x *ComplianceLicense) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceLicense.ProtoReflect.Descriptor instead.
func (*ComplianceLicense) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{0}
}

func (x *ComplianceLicense) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ComplianceLicense) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ComplianceLicense) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *ComplianceLicense) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *ComplianceLicense) GetDeprecateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DeprecateTime
	}
	return nil
}

func (x *ComplianceLicense) GetTags() []byte {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ComplianceLicense) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ComplianceLicense) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ComplianceLicense) GetReferences() []byte {
	if x != nil {
		return x.References
	}
	return nil
}

func (x *ComplianceLicense) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *ComplianceLicense) GetStandardHeader() string {
	if x != nil {
		return x.StandardHeader
	}
	return ""
}

func (x *ComplianceLicense) GetComments() string {
	if x != nil {
		return x.Comments
	}
	return ""
}

func (x *ComplianceLicense) GetSpecific() []byte {
	if x != nil {
		return x.Specific
	}
	return nil
}

type ComplianceLicenses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*ComplianceLicense `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ComplianceLicenses) Reset() {
	*x = ComplianceLicenses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceLicenses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceLicenses) ProtoMessage() {}

func (x *ComplianceLicenses) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceLicenses.ProtoReflect.Descriptor instead.
func (*ComplianceLicenses) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{1}
}

func (x *ComplianceLicenses) GetItems() []*ComplianceLicense {
	if x != nil {
		return x.Items
	}
	return nil
}

type ComplianceLicenseTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// primary key
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// management
	CreateTime    *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime    *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	DeprecateTime *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=deprecate_time,json=deprecateTime,proto3,oneof" json:"deprecate_time,omitempty"`
	// information
	Description string `protobuf:"bytes,21,opt,name=description,proto3" json:"description,omitempty"`
	References  []byte `protobuf:"bytes,22,opt,name=references,proto3" json:"references,omitempty"`
	Category    string `protobuf:"bytes,23,opt,name=category,proto3" json:"category,omitempty"`
	// extension
	Specific []byte `protobuf:"bytes,101,opt,name=specific,proto3,oneof" json:"specific,omitempty"`
}

func (x *ComplianceLicenseTag) Reset() {
	*x = ComplianceLicenseTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceLicenseTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceLicenseTag) ProtoMessage() {}

func (x *ComplianceLicenseTag) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceLicenseTag.ProtoReflect.Descriptor instead.
func (*ComplianceLicenseTag) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{2}
}

func (x *ComplianceLicenseTag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ComplianceLicenseTag) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *ComplianceLicenseTag) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *ComplianceLicenseTag) GetDeprecateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DeprecateTime
	}
	return nil
}

func (x *ComplianceLicenseTag) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ComplianceLicenseTag) GetReferences() []byte {
	if x != nil {
		return x.References
	}
	return nil
}

func (x *ComplianceLicenseTag) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *ComplianceLicenseTag) GetSpecific() []byte {
	if x != nil {
		return x.Specific
	}
	return nil
}

type ComplianceLicenseTags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*ComplianceLicenseTag `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ComplianceLicenseTags) Reset() {
	*x = ComplianceLicenseTags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceLicenseTags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceLicenseTags) ProtoMessage() {}

func (x *ComplianceLicenseTags) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceLicenseTags.ProtoReflect.Descriptor instead.
func (*ComplianceLicenseTags) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{3}
}

func (x *ComplianceLicenseTags) GetItems() []*ComplianceLicenseTag {
	if x != nil {
		return x.Items
	}
	return nil
}

type WeaknessVulnerability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// primary key
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Purl      string `protobuf:"bytes,3,opt,name=purl,proto3" json:"purl,omitempty"`
	// management
	CreateTime    *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime    *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	DeprecateTime *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=deprecate_time,json=deprecateTime,proto3,oneof" json:"deprecate_time,omitempty"`
	Tags          []byte                 `protobuf:"bytes,14,opt,name=tags,proto3" json:"tags,omitempty"`
	PurlFuzzy     string                 `protobuf:"bytes,15,opt,name=purl_fuzzy,json=purlFuzzy,proto3" json:"purl_fuzzy,omitempty"`
	// information
	Code         string                 `protobuf:"bytes,21,opt,name=code,proto3" json:"code,omitempty"`
	Description  string                 `protobuf:"bytes,22,opt,name=description,proto3" json:"description,omitempty"`
	References   []byte                 `protobuf:"bytes,23,opt,name=references,proto3" json:"references,omitempty"`
	Summary      string                 `protobuf:"bytes,24,opt,name=summary,proto3" json:"summary,omitempty"`
	Mitigation   string                 `protobuf:"bytes,25,opt,name=mitigation,proto3" json:"mitigation,omitempty"`
	Exploitation string                 `protobuf:"bytes,26,opt,name=exploitation,proto3" json:"exploitation,omitempty"`
	Affected     string                 `protobuf:"bytes,27,opt,name=affected,proto3" json:"affected,omitempty"`
	Patched      []byte                 `protobuf:"bytes,28,opt,name=patched,proto3" json:"patched,omitempty"`
	Cvss         []byte                 `protobuf:"bytes,29,opt,name=cvss,proto3" json:"cvss,omitempty"`
	Cwes         []byte                 `protobuf:"bytes,30,opt,name=cwes,proto3" json:"cwes,omitempty"`
	Epss         []byte                 `protobuf:"bytes,31,opt,name=epss,proto3" json:"epss,omitempty"`
	Published    *timestamppb.Timestamp `protobuf:"bytes,32,opt,name=published,proto3" json:"published,omitempty"`
	Modified     *timestamppb.Timestamp `protobuf:"bytes,33,opt,name=modified,proto3" json:"modified,omitempty"`
	// extension
	Specific []byte `protobuf:"bytes,101,opt,name=specific,proto3,oneof" json:"specific,omitempty"`
}

func (x *WeaknessVulnerability) Reset() {
	*x = WeaknessVulnerability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeaknessVulnerability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeaknessVulnerability) ProtoMessage() {}

func (x *WeaknessVulnerability) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeaknessVulnerability.ProtoReflect.Descriptor instead.
func (*WeaknessVulnerability) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{4}
}

func (x *WeaknessVulnerability) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *WeaknessVulnerability) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WeaknessVulnerability) GetPurl() string {
	if x != nil {
		return x.Purl
	}
	return ""
}

func (x *WeaknessVulnerability) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *WeaknessVulnerability) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *WeaknessVulnerability) GetDeprecateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DeprecateTime
	}
	return nil
}

func (x *WeaknessVulnerability) GetTags() []byte {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *WeaknessVulnerability) GetPurlFuzzy() string {
	if x != nil {
		return x.PurlFuzzy
	}
	return ""
}

func (x *WeaknessVulnerability) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *WeaknessVulnerability) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *WeaknessVulnerability) GetReferences() []byte {
	if x != nil {
		return x.References
	}
	return nil
}

func (x *WeaknessVulnerability) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *WeaknessVulnerability) GetMitigation() string {
	if x != nil {
		return x.Mitigation
	}
	return ""
}

func (x *WeaknessVulnerability) GetExploitation() string {
	if x != nil {
		return x.Exploitation
	}
	return ""
}

func (x *WeaknessVulnerability) GetAffected() string {
	if x != nil {
		return x.Affected
	}
	return ""
}

func (x *WeaknessVulnerability) GetPatched() []byte {
	if x != nil {
		return x.Patched
	}
	return nil
}

func (x *WeaknessVulnerability) GetCvss() []byte {
	if x != nil {
		return x.Cvss
	}
	return nil
}

func (x *WeaknessVulnerability) GetCwes() []byte {
	if x != nil {
		return x.Cwes
	}
	return nil
}

func (x *WeaknessVulnerability) GetEpss() []byte {
	if x != nil {
		return x.Epss
	}
	return nil
}

func (x *WeaknessVulnerability) GetPublished() *timestamppb.Timestamp {
	if x != nil {
		return x.Published
	}
	return nil
}

func (x *WeaknessVulnerability) GetModified() *timestamppb.Timestamp {
	if x != nil {
		return x.Modified
	}
	return nil
}

func (x *WeaknessVulnerability) GetSpecific() []byte {
	if x != nil {
		return x.Specific
	}
	return nil
}

type WeaknessVulnerabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*WeaknessVulnerability `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *WeaknessVulnerabilities) Reset() {
	*x = WeaknessVulnerabilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeaknessVulnerabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeaknessVulnerabilities) ProtoMessage() {}

func (x *WeaknessVulnerabilities) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeaknessVulnerabilities.ProtoReflect.Descriptor instead.
func (*WeaknessVulnerabilities) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{5}
}

func (x *WeaknessVulnerabilities) GetItems() []*WeaknessVulnerability {
	if x != nil {
		return x.Items
	}
	return nil
}

type WeaknessVulnerabilityTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// primary key
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// management
	CreateTime    *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime    *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	DeprecateTime *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=deprecate_time,json=deprecateTime,proto3,oneof" json:"deprecate_time,omitempty"`
	// information
	Description string                 `protobuf:"bytes,21,opt,name=description,proto3" json:"description,omitempty"`
	References  []byte                 `protobuf:"bytes,22,opt,name=references,proto3" json:"references,omitempty"`
	Exploits    []byte                 `protobuf:"bytes,23,opt,name=exploits,proto3" json:"exploits,omitempty"`
	Category    string                 `protobuf:"bytes,24,opt,name=category,proto3" json:"category,omitempty"`
	Cvsses      []byte                 `protobuf:"bytes,25,opt,name=cvsses,proto3" json:"cvsses,omitempty"`
	Cwes        []byte                 `protobuf:"bytes,26,opt,name=cwes,proto3" json:"cwes,omitempty"`
	Cpes        []byte                 `protobuf:"bytes,27,opt,name=cpes,proto3" json:"cpes,omitempty"`
	Epsses      []byte                 `protobuf:"bytes,28,opt,name=epsses,proto3" json:"epsses,omitempty"`
	Published   *timestamppb.Timestamp `protobuf:"bytes,29,opt,name=published,proto3" json:"published,omitempty"`
	Modified    *timestamppb.Timestamp `protobuf:"bytes,30,opt,name=modified,proto3" json:"modified,omitempty"`
	// extension
	Specific []byte `protobuf:"bytes,101,opt,name=specific,proto3,oneof" json:"specific,omitempty"`
}

func (x *WeaknessVulnerabilityTag) Reset() {
	*x = WeaknessVulnerabilityTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeaknessVulnerabilityTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeaknessVulnerabilityTag) ProtoMessage() {}

func (x *WeaknessVulnerabilityTag) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeaknessVulnerabilityTag.ProtoReflect.Descriptor instead.
func (*WeaknessVulnerabilityTag) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{6}
}

func (x *WeaknessVulnerabilityTag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WeaknessVulnerabilityTag) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *WeaknessVulnerabilityTag) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *WeaknessVulnerabilityTag) GetDeprecateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DeprecateTime
	}
	return nil
}

func (x *WeaknessVulnerabilityTag) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *WeaknessVulnerabilityTag) GetReferences() []byte {
	if x != nil {
		return x.References
	}
	return nil
}

func (x *WeaknessVulnerabilityTag) GetExploits() []byte {
	if x != nil {
		return x.Exploits
	}
	return nil
}

func (x *WeaknessVulnerabilityTag) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *WeaknessVulnerabilityTag) GetCvsses() []byte {
	if x != nil {
		return x.Cvsses
	}
	return nil
}

func (x *WeaknessVulnerabilityTag) GetCwes() []byte {
	if x != nil {
		return x.Cwes
	}
	return nil
}

func (x *WeaknessVulnerabilityTag) GetCpes() []byte {
	if x != nil {
		return x.Cpes
	}
	return nil
}

func (x *WeaknessVulnerabilityTag) GetEpsses() []byte {
	if x != nil {
		return x.Epsses
	}
	return nil
}

func (x *WeaknessVulnerabilityTag) GetPublished() *timestamppb.Timestamp {
	if x != nil {
		return x.Published
	}
	return nil
}

func (x *WeaknessVulnerabilityTag) GetModified() *timestamppb.Timestamp {
	if x != nil {
		return x.Modified
	}
	return nil
}

func (x *WeaknessVulnerabilityTag) GetSpecific() []byte {
	if x != nil {
		return x.Specific
	}
	return nil
}

type WeaknessVulnerabilityTags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*WeaknessVulnerabilityTag `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *WeaknessVulnerabilityTags) Reset() {
	*x = WeaknessVulnerabilityTags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeaknessVulnerabilityTags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeaknessVulnerabilityTags) ProtoMessage() {}

func (x *WeaknessVulnerabilityTags) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeaknessVulnerabilityTags.ProtoReflect.Descriptor instead.
func (*WeaknessVulnerabilityTags) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{7}
}

func (x *WeaknessVulnerabilityTags) GetItems() []*WeaknessVulnerabilityTag {
	if x != nil {
		return x.Items
	}
	return nil
}

type WeaknessVulnerabilityFeature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// primary key
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// management
	CreateTime    *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime    *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	DeprecateTime *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=deprecate_time,json=deprecateTime,proto3,oneof" json:"deprecate_time,omitempty"`
	// information
	Description string `protobuf:"bytes,21,opt,name=description,proto3" json:"description,omitempty"`
	Type        string `protobuf:"bytes,22,opt,name=type,proto3" json:"type,omitempty"`
	Value       []byte `protobuf:"bytes,23,opt,name=value,proto3,oneof" json:"value,omitempty"`
	Disabled    bool   `protobuf:"varint,24,opt,name=disabled,proto3" json:"disabled,omitempty"`
}

func (x *WeaknessVulnerabilityFeature) Reset() {
	*x = WeaknessVulnerabilityFeature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeaknessVulnerabilityFeature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeaknessVulnerabilityFeature) ProtoMessage() {}

func (x *WeaknessVulnerabilityFeature) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeaknessVulnerabilityFeature.ProtoReflect.Descriptor instead.
func (*WeaknessVulnerabilityFeature) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{8}
}

func (x *WeaknessVulnerabilityFeature) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WeaknessVulnerabilityFeature) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *WeaknessVulnerabilityFeature) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *WeaknessVulnerabilityFeature) GetDeprecateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DeprecateTime
	}
	return nil
}

func (x *WeaknessVulnerabilityFeature) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *WeaknessVulnerabilityFeature) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *WeaknessVulnerabilityFeature) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *WeaknessVulnerabilityFeature) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

type WeaknessVulnerabilityFeatures struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*WeaknessVulnerabilityFeature `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *WeaknessVulnerabilityFeatures) Reset() {
	*x = WeaknessVulnerabilityFeatures{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeaknessVulnerabilityFeatures) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeaknessVulnerabilityFeatures) ProtoMessage() {}

func (x *WeaknessVulnerabilityFeatures) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeaknessVulnerabilityFeatures.ProtoReflect.Descriptor instead.
func (*WeaknessVulnerabilityFeatures) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{9}
}

func (x *WeaknessVulnerabilityFeatures) GetItems() []*WeaknessVulnerabilityFeature {
	if x != nil {
		return x.Items
	}
	return nil
}

type DatasetIngestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// continuation
	Window     int32  `protobuf:"varint,1,opt,name=window,proto3" json:"window,omitempty"` // start from 0
	WindowSize *int32 `protobuf:"varint,2,opt,name=window_size,json=windowSize,proto3,oneof" json:"window_size,omitempty"`
	// condition
	Type  DatasetIngestRequestType `protobuf:"varint,11,opt,name=type,proto3,enum=schema.DatasetIngestRequestType" json:"type,omitempty"`
	Since *timestamppb.Timestamp   `protobuf:"bytes,12,opt,name=since,proto3,oneof" json:"since,omitempty"`
}

func (x *DatasetIngestRequest) Reset() {
	*x = DatasetIngestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatasetIngestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasetIngestRequest) ProtoMessage() {}

func (x *DatasetIngestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatasetIngestRequest.ProtoReflect.Descriptor instead.
func (*DatasetIngestRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{10}
}

func (x *DatasetIngestRequest) GetWindow() int32 {
	if x != nil {
		return x.Window
	}
	return 0
}

func (x *DatasetIngestRequest) GetWindowSize() int32 {
	if x != nil && x.WindowSize != nil {
		return *x.WindowSize
	}
	return 0
}

func (x *DatasetIngestRequest) GetType() DatasetIngestRequestType {
	if x != nil {
		return x.Type
	}
	return DatasetIngestRequestType_Compliance_License_Tag
}

func (x *DatasetIngestRequest) GetSince() *timestamppb.Timestamp {
	if x != nil {
		return x.Since
	}
	return nil
}

type DatasetIngestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// continuation
	NextWindow *int32 `protobuf:"varint,1,opt,name=next_window,json=nextWindow,proto3,oneof" json:"next_window,omitempty"`
	WindowSize int32  `protobuf:"varint,2,opt,name=window_size,json=windowSize,proto3" json:"window_size,omitempty"`
	// result
	//
	// Types that are assignable to Body:
	//	*DatasetIngestResponse_ComplianceLicenses
	//	*DatasetIngestResponse_ComplianceLicenseTags
	//	*DatasetIngestResponse_WeaknessVulnerabilities
	//	*DatasetIngestResponse_WeaknessVulnerabilityTags
	//	*DatasetIngestResponse_WeaknessVulnerabilityFeatures
	Body isDatasetIngestResponse_Body `protobuf_oneof:"body"`
}

func (x *DatasetIngestResponse) Reset() {
	*x = DatasetIngestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatasetIngestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasetIngestResponse) ProtoMessage() {}

func (x *DatasetIngestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatasetIngestResponse.ProtoReflect.Descriptor instead.
func (*DatasetIngestResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{11}
}

func (x *DatasetIngestResponse) GetNextWindow() int32 {
	if x != nil && x.NextWindow != nil {
		return *x.NextWindow
	}
	return 0
}

func (x *DatasetIngestResponse) GetWindowSize() int32 {
	if x != nil {
		return x.WindowSize
	}
	return 0
}

func (m *DatasetIngestResponse) GetBody() isDatasetIngestResponse_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (x *DatasetIngestResponse) GetComplianceLicenses() *ComplianceLicenses {
	if x, ok := x.GetBody().(*DatasetIngestResponse_ComplianceLicenses); ok {
		return x.ComplianceLicenses
	}
	return nil
}

func (x *DatasetIngestResponse) GetComplianceLicenseTags() *ComplianceLicenseTags {
	if x, ok := x.GetBody().(*DatasetIngestResponse_ComplianceLicenseTags); ok {
		return x.ComplianceLicenseTags
	}
	return nil
}

func (x *DatasetIngestResponse) GetWeaknessVulnerabilities() *WeaknessVulnerabilities {
	if x, ok := x.GetBody().(*DatasetIngestResponse_WeaknessVulnerabilities); ok {
		return x.WeaknessVulnerabilities
	}
	return nil
}

func (x *DatasetIngestResponse) GetWeaknessVulnerabilityTags() *WeaknessVulnerabilityTags {
	if x, ok := x.GetBody().(*DatasetIngestResponse_WeaknessVulnerabilityTags); ok {
		return x.WeaknessVulnerabilityTags
	}
	return nil
}

func (x *DatasetIngestResponse) GetWeaknessVulnerabilityFeatures() *WeaknessVulnerabilityFeatures {
	if x, ok := x.GetBody().(*DatasetIngestResponse_WeaknessVulnerabilityFeatures); ok {
		return x.WeaknessVulnerabilityFeatures
	}
	return nil
}

type isDatasetIngestResponse_Body interface {
	isDatasetIngestResponse_Body()
}

type DatasetIngestResponse_ComplianceLicenses struct {
	ComplianceLicenses *ComplianceLicenses `protobuf:"bytes,11,opt,name=compliance_licenses,json=complianceLicenses,proto3,oneof"`
}

type DatasetIngestResponse_ComplianceLicenseTags struct {
	ComplianceLicenseTags *ComplianceLicenseTags `protobuf:"bytes,12,opt,name=compliance_license_tags,json=complianceLicenseTags,proto3,oneof"`
}

type DatasetIngestResponse_WeaknessVulnerabilities struct {
	WeaknessVulnerabilities *WeaknessVulnerabilities `protobuf:"bytes,13,opt,name=weakness_vulnerabilities,json=weaknessVulnerabilities,proto3,oneof"`
}

type DatasetIngestResponse_WeaknessVulnerabilityTags struct {
	WeaknessVulnerabilityTags *WeaknessVulnerabilityTags `protobuf:"bytes,14,opt,name=weakness_vulnerability_tags,json=weaknessVulnerabilityTags,proto3,oneof"`
}

type DatasetIngestResponse_WeaknessVulnerabilityFeatures struct {
	WeaknessVulnerabilityFeatures *WeaknessVulnerabilityFeatures `protobuf:"bytes,15,opt,name=weakness_vulnerability_features,json=weaknessVulnerabilityFeatures,proto3,oneof"`
}

func (*DatasetIngestResponse_ComplianceLicenses) isDatasetIngestResponse_Body() {}

func (*DatasetIngestResponse_ComplianceLicenseTags) isDatasetIngestResponse_Body() {}

func (*DatasetIngestResponse_WeaknessVulnerabilities) isDatasetIngestResponse_Body() {}

func (*DatasetIngestResponse_WeaknessVulnerabilityTags) isDatasetIngestResponse_Body() {}

func (*DatasetIngestResponse_WeaknessVulnerabilityFeatures) isDatasetIngestResponse_Body() {}

var File_api_proto protoreflect.FileDescriptor

var file_api_proto_rawDesc = []byte{
	0x0a, 0x09, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8b, 0x04, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x0e, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x65,
	0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x27, 0x0a, 0x0f,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x1f, 0x0a, 0x08, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x18, 0x65, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x88,
	0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x22, 0x45, 0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x8b, 0x03, 0x0a, 0x14, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x54,
	0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x46, 0x0a, 0x0e, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x08, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x64, 0x65, 0x70, 0x72,
	0x65, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x22, 0x4b, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x54, 0x61, 0x67, 0x73,
	0x12, 0x32, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x54, 0x61, 0x67, 0x52, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x22, 0xab, 0x06, 0x0a, 0x15, 0x57, 0x65, 0x61, 0x6b, 0x6e, 0x65, 0x73,
	0x73, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1c,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x75, 0x72, 0x6c, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x46,
	0x0a, 0x0e, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75,
	0x72, 0x6c, 0x5f, 0x66, 0x75, 0x7a, 0x7a, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x75, 0x72, 0x6c, 0x46, 0x75, 0x7a, 0x7a, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x69, 0x74,
	0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d,
	0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x70,
	0x6c, 0x6f, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x76, 0x73, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x63, 0x76, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x77, 0x65, 0x73, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x63, 0x77, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x65,
	0x70, 0x73, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x65, 0x70, 0x73, 0x73, 0x12,
	0x38, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x08, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x12, 0x1f, 0x0a, 0x08, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x18, 0x65, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x88,
	0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x22, 0x4e, 0x0a, 0x17, 0x57, 0x65, 0x61, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x56, 0x75,
	0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x33, 0x0a,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x57, 0x65, 0x61, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x56, 0x75,
	0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x22, 0xf5, 0x04, 0x0a, 0x18, 0x57, 0x65, 0x61, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x56,
	0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x61, 0x67, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x46, 0x0a,
	0x0e, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x6c, 0x6f,
	0x69, 0x74, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x65, 0x78, 0x70, 0x6c, 0x6f,
	0x69, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x76, 0x73, 0x73, 0x65, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x63, 0x76, 0x73, 0x73, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x77, 0x65, 0x73, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x63, 0x77, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x70, 0x65, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x63, 0x70, 0x65, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x65, 0x70, 0x73, 0x73, 0x65, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x65, 0x70, 0x73, 0x73, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x12, 0x36, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x08, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x08, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x64,
	0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x22, 0x53, 0x0a, 0x19, 0x57, 0x65,
	0x61, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x54, 0x61, 0x67, 0x73, 0x12, 0x36, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x57, 0x65, 0x61, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x61, 0x67, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22,
	0xfe, 0x02, 0x0a, 0x1c, 0x57, 0x65, 0x61, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x56, 0x75, 0x6c, 0x6e,
	0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x46,
	0x0a, 0x0e, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x5b, 0x0a, 0x1d, 0x57, 0x65, 0x61, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x56, 0x75, 0x6c, 0x6e,
	0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x12, 0x3a, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x57, 0x65, 0x61, 0x6b, 0x6e, 0x65,
	0x73, 0x73, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xdb, 0x01,
	0x0a, 0x14, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x24,
	0x0a, 0x0b, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0a, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x69, 0x7a,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x20, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x73, 0x69,
	0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x05, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x22, 0xd2, 0x04, 0x0a, 0x15,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x77, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0a, 0x6e, 0x65,
	0x78, 0x74, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x77,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x4d, 0x0a, 0x13,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x73, 0x48, 0x00, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x17, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x54, 0x61, 0x67, 0x73, 0x48, 0x00, 0x52, 0x15, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x54, 0x61, 0x67, 0x73, 0x12, 0x5c, 0x0a, 0x18, 0x77, 0x65, 0x61, 0x6b, 0x6e, 0x65, 0x73, 0x73,
	0x5f, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x57, 0x65, 0x61, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x48, 0x00, 0x52, 0x17, 0x77, 0x65, 0x61, 0x6b, 0x6e,
	0x65, 0x73, 0x73, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x63, 0x0a, 0x1b, 0x77, 0x65, 0x61, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x76,
	0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x57, 0x65, 0x61, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x61, 0x67, 0x73, 0x48, 0x00, 0x52, 0x19, 0x77, 0x65,
	0x61, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x54, 0x61, 0x67, 0x73, 0x12, 0x6f, 0x0a, 0x1f, 0x77, 0x65, 0x61, 0x6b, 0x6e,
	0x65, 0x73, 0x73, 0x5f, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x57, 0x65, 0x61, 0x6b, 0x6e, 0x65,
	0x73, 0x73, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x48, 0x00, 0x52, 0x1d, 0x77, 0x65, 0x61, 0x6b, 0x6e,
	0x65, 0x73, 0x73, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x2a, 0xae, 0x01, 0x0a, 0x18, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x67, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a,
	0x16, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x4c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x5f, 0x54, 0x61, 0x67, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x10,
	0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x57, 0x65, 0x61, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x56, 0x75,
	0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x54, 0x61, 0x67, 0x10,
	0x02, 0x12, 0x1a, 0x0a, 0x16, 0x57, 0x65, 0x61, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x56, 0x75,
	0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x10, 0x03, 0x12, 0x22, 0x0a,
	0x1e, 0x57, 0x65, 0x61, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x10,
	0x04, 0x32, 0x5d, 0x0a, 0x0e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x4b, 0x0a, 0x06, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x6e,
	0x67, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x67, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01,
	0x42, 0x24, 0x5a, 0x22, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73,
	0x65, 0x61, 0x6c, 0x2d, 0x69, 0x6f, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_proto_rawDescOnce sync.Once
	file_api_proto_rawDescData = file_api_proto_rawDesc
)

func file_api_proto_rawDescGZIP() []byte {
	file_api_proto_rawDescOnce.Do(func() {
		file_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_proto_rawDescData)
	})
	return file_api_proto_rawDescData
}

var file_api_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_api_proto_goTypes = []interface{}{
	(DatasetIngestRequestType)(0),         // 0: schema.DatasetIngestRequestType
	(*ComplianceLicense)(nil),             // 1: schema.ComplianceLicense
	(*ComplianceLicenses)(nil),            // 2: schema.ComplianceLicenses
	(*ComplianceLicenseTag)(nil),          // 3: schema.ComplianceLicenseTag
	(*ComplianceLicenseTags)(nil),         // 4: schema.ComplianceLicenseTags
	(*WeaknessVulnerability)(nil),         // 5: schema.WeaknessVulnerability
	(*WeaknessVulnerabilities)(nil),       // 6: schema.WeaknessVulnerabilities
	(*WeaknessVulnerabilityTag)(nil),      // 7: schema.WeaknessVulnerabilityTag
	(*WeaknessVulnerabilityTags)(nil),     // 8: schema.WeaknessVulnerabilityTags
	(*WeaknessVulnerabilityFeature)(nil),  // 9: schema.WeaknessVulnerabilityFeature
	(*WeaknessVulnerabilityFeatures)(nil), // 10: schema.WeaknessVulnerabilityFeatures
	(*DatasetIngestRequest)(nil),          // 11: schema.DatasetIngestRequest
	(*DatasetIngestResponse)(nil),         // 12: schema.DatasetIngestResponse
	(*timestamppb.Timestamp)(nil),         // 13: google.protobuf.Timestamp
}
var file_api_proto_depIdxs = []int32{
	13, // 0: schema.ComplianceLicense.create_time:type_name -> google.protobuf.Timestamp
	13, // 1: schema.ComplianceLicense.update_time:type_name -> google.protobuf.Timestamp
	13, // 2: schema.ComplianceLicense.deprecate_time:type_name -> google.protobuf.Timestamp
	1,  // 3: schema.ComplianceLicenses.items:type_name -> schema.ComplianceLicense
	13, // 4: schema.ComplianceLicenseTag.create_time:type_name -> google.protobuf.Timestamp
	13, // 5: schema.ComplianceLicenseTag.update_time:type_name -> google.protobuf.Timestamp
	13, // 6: schema.ComplianceLicenseTag.deprecate_time:type_name -> google.protobuf.Timestamp
	3,  // 7: schema.ComplianceLicenseTags.items:type_name -> schema.ComplianceLicenseTag
	13, // 8: schema.WeaknessVulnerability.create_time:type_name -> google.protobuf.Timestamp
	13, // 9: schema.WeaknessVulnerability.update_time:type_name -> google.protobuf.Timestamp
	13, // 10: schema.WeaknessVulnerability.deprecate_time:type_name -> google.protobuf.Timestamp
	13, // 11: schema.WeaknessVulnerability.published:type_name -> google.protobuf.Timestamp
	13, // 12: schema.WeaknessVulnerability.modified:type_name -> google.protobuf.Timestamp
	5,  // 13: schema.WeaknessVulnerabilities.items:type_name -> schema.WeaknessVulnerability
	13, // 14: schema.WeaknessVulnerabilityTag.create_time:type_name -> google.protobuf.Timestamp
	13, // 15: schema.WeaknessVulnerabilityTag.update_time:type_name -> google.protobuf.Timestamp
	13, // 16: schema.WeaknessVulnerabilityTag.deprecate_time:type_name -> google.protobuf.Timestamp
	13, // 17: schema.WeaknessVulnerabilityTag.published:type_name -> google.protobuf.Timestamp
	13, // 18: schema.WeaknessVulnerabilityTag.modified:type_name -> google.protobuf.Timestamp
	7,  // 19: schema.WeaknessVulnerabilityTags.items:type_name -> schema.WeaknessVulnerabilityTag
	13, // 20: schema.WeaknessVulnerabilityFeature.create_time:type_name -> google.protobuf.Timestamp
	13, // 21: schema.WeaknessVulnerabilityFeature.update_time:type_name -> google.protobuf.Timestamp
	13, // 22: schema.WeaknessVulnerabilityFeature.deprecate_time:type_name -> google.protobuf.Timestamp
	9,  // 23: schema.WeaknessVulnerabilityFeatures.items:type_name -> schema.WeaknessVulnerabilityFeature
	0,  // 24: schema.DatasetIngestRequest.type:type_name -> schema.DatasetIngestRequestType
	13, // 25: schema.DatasetIngestRequest.since:type_name -> google.protobuf.Timestamp
	2,  // 26: schema.DatasetIngestResponse.compliance_licenses:type_name -> schema.ComplianceLicenses
	4,  // 27: schema.DatasetIngestResponse.compliance_license_tags:type_name -> schema.ComplianceLicenseTags
	6,  // 28: schema.DatasetIngestResponse.weakness_vulnerabilities:type_name -> schema.WeaknessVulnerabilities
	8,  // 29: schema.DatasetIngestResponse.weakness_vulnerability_tags:type_name -> schema.WeaknessVulnerabilityTags
	10, // 30: schema.DatasetIngestResponse.weakness_vulnerability_features:type_name -> schema.WeaknessVulnerabilityFeatures
	11, // 31: schema.DatasetService.Ingest:input_type -> schema.DatasetIngestRequest
	12, // 32: schema.DatasetService.Ingest:output_type -> schema.DatasetIngestResponse
	32, // [32:33] is the sub-list for method output_type
	31, // [31:32] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_api_proto_init() }
func file_api_proto_init() {
	if File_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplianceLicense); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplianceLicenses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplianceLicenseTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplianceLicenseTags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeaknessVulnerability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeaknessVulnerabilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeaknessVulnerabilityTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeaknessVulnerabilityTags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeaknessVulnerabilityFeature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeaknessVulnerabilityFeatures); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatasetIngestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatasetIngestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_api_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_api_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_api_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_api_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_api_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_api_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*DatasetIngestResponse_ComplianceLicenses)(nil),
		(*DatasetIngestResponse_ComplianceLicenseTags)(nil),
		(*DatasetIngestResponse_WeaknessVulnerabilities)(nil),
		(*DatasetIngestResponse_WeaknessVulnerabilityTags)(nil),
		(*DatasetIngestResponse_WeaknessVulnerabilityFeatures)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_proto_goTypes,
		DependencyIndexes: file_api_proto_depIdxs,
		EnumInfos:         file_api_proto_enumTypes,
		MessageInfos:      file_api_proto_msgTypes,
	}.Build()
	File_api_proto = out.File
	file_api_proto_rawDesc = nil
	file_api_proto_goTypes = nil
	file_api_proto_depIdxs = nil
}
